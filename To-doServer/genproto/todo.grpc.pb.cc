// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo.proto

#include "todo.pb.h"
#include "todo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ToDoService {
namespace v1 {

static const char* ToDoService_method_names[] = {
  "/ToDoService.v1.ToDoService/GetList",
  "/ToDoService.v1.ToDoService/AddItem",
  "/ToDoService.v1.ToDoService/UpdateItem",
  "/ToDoService.v1.ToDoService/StreamUpdateChange",
};

std::unique_ptr< ToDoService::Stub> ToDoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ToDoService::Stub> stub(new ToDoService::Stub(channel, options));
  return stub;
}

ToDoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetList_(ToDoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddItem_(ToDoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateItem_(ToDoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamUpdateChange_(ToDoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ToDoService::Stub::GetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::ToDoService::v1::GetListRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ToDoService::v1::GetListReq, ::ToDoService::v1::GetListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetList_, context, request, response);
}

void ToDoService::Stub::async::GetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq* request, ::ToDoService::v1::GetListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ToDoService::v1::GetListReq, ::ToDoService::v1::GetListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::GetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq* request, ::ToDoService::v1::GetListRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ToDoService::v1::GetListRes>* ToDoService::Stub::PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ToDoService::v1::GetListRes, ::ToDoService::v1::GetListReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ToDoService::v1::GetListRes>* ToDoService::Stub::AsyncGetListRaw(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ToDoService::Stub::AddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::ToDoService::v1::AddItemRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ToDoService::v1::AddItemReq, ::ToDoService::v1::AddItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddItem_, context, request, response);
}

void ToDoService::Stub::async::AddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq* request, ::ToDoService::v1::AddItemRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ToDoService::v1::AddItemReq, ::ToDoService::v1::AddItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddItem_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::AddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq* request, ::ToDoService::v1::AddItemRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ToDoService::v1::AddItemRes>* ToDoService::Stub::PrepareAsyncAddItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ToDoService::v1::AddItemRes, ::ToDoService::v1::AddItemReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ToDoService::v1::AddItemRes>* ToDoService::Stub::AsyncAddItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ToDoService::Stub::UpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::ToDoService::v1::UpdateItemRes* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ToDoService::v1::UpdateItemReq, ::ToDoService::v1::UpdateItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateItem_, context, request, response);
}

void ToDoService::Stub::async::UpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq* request, ::ToDoService::v1::UpdateItemRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ToDoService::v1::UpdateItemReq, ::ToDoService::v1::UpdateItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateItem_, context, request, response, std::move(f));
}

void ToDoService::Stub::async::UpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq* request, ::ToDoService::v1::UpdateItemRes* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ToDoService::v1::UpdateItemRes>* ToDoService::Stub::PrepareAsyncUpdateItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ToDoService::v1::UpdateItemRes, ::ToDoService::v1::UpdateItemReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ToDoService::v1::UpdateItemRes>* ToDoService::Stub::AsyncUpdateItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::ToDoService::v1::StreamUpdateChangeRes>* ToDoService::Stub::StreamUpdateChangeRaw(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::ToDoService::v1::StreamUpdateChangeRes>::Create(channel_.get(), rpcmethod_StreamUpdateChange_, context, request);
}

void ToDoService::Stub::async::StreamUpdateChange(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq* request, ::grpc::ClientReadReactor< ::ToDoService::v1::StreamUpdateChangeRes>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ToDoService::v1::StreamUpdateChangeRes>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamUpdateChange_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ToDoService::v1::StreamUpdateChangeRes>* ToDoService::Stub::AsyncStreamUpdateChangeRaw(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ToDoService::v1::StreamUpdateChangeRes>::Create(channel_.get(), cq, rpcmethod_StreamUpdateChange_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ToDoService::v1::StreamUpdateChangeRes>* ToDoService::Stub::PrepareAsyncStreamUpdateChangeRaw(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ToDoService::v1::StreamUpdateChangeRes>::Create(channel_.get(), cq, rpcmethod_StreamUpdateChange_, context, request, false, nullptr);
}

ToDoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::ToDoService::v1::GetListReq, ::ToDoService::v1::GetListRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ToDoService::v1::GetListReq* req,
             ::ToDoService::v1::GetListRes* resp) {
               return service->GetList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::ToDoService::v1::AddItemReq, ::ToDoService::v1::AddItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ToDoService::v1::AddItemReq* req,
             ::ToDoService::v1::AddItemRes* resp) {
               return service->AddItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ToDoService::Service, ::ToDoService::v1::UpdateItemReq, ::ToDoService::v1::UpdateItemRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ToDoService::v1::UpdateItemReq* req,
             ::ToDoService::v1::UpdateItemRes* resp) {
               return service->UpdateItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ToDoService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ToDoService::Service, ::ToDoService::v1::StreamUpdateChangeReq, ::ToDoService::v1::StreamUpdateChangeRes>(
          [](ToDoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ToDoService::v1::StreamUpdateChangeReq* req,
             ::grpc::ServerWriter<::ToDoService::v1::StreamUpdateChangeRes>* writer) {
               return service->StreamUpdateChange(ctx, req, writer);
             }, this)));
}

ToDoService::Service::~Service() {
}

::grpc::Status ToDoService::Service::GetList(::grpc::ServerContext* context, const ::ToDoService::v1::GetListReq* request, ::ToDoService::v1::GetListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::AddItem(::grpc::ServerContext* context, const ::ToDoService::v1::AddItemReq* request, ::ToDoService::v1::AddItemRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::UpdateItem(::grpc::ServerContext* context, const ::ToDoService::v1::UpdateItemReq* request, ::ToDoService::v1::UpdateItemRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ToDoService::Service::StreamUpdateChange(::grpc::ServerContext* context, const ::ToDoService::v1::StreamUpdateChangeReq* request, ::grpc::ServerWriter< ::ToDoService::v1::StreamUpdateChangeRes>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ToDoService
}  // namespace v1

