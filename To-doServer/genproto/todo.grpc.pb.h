// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo.proto
#ifndef GRPC_todo_2eproto__INCLUDED
#define GRPC_todo_2eproto__INCLUDED

#include "todo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace ToDoService {
namespace v1 {

class ToDoService final {
 public:
  static constexpr char const* service_full_name() {
    return "ToDoService.v1.ToDoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::ToDoService::v1::GetListRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::GetListRes>> AsyncGetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::GetListRes>>(AsyncGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::GetListRes>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::GetListRes>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    virtual ::grpc::Status AddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::ToDoService::v1::AddItemRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::AddItemRes>> AsyncAddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::AddItemRes>>(AsyncAddItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::AddItemRes>> PrepareAsyncAddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::AddItemRes>>(PrepareAsyncAddItemRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::ToDoService::v1::UpdateItemRes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::UpdateItemRes>> AsyncUpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::UpdateItemRes>>(AsyncUpdateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::UpdateItemRes>> PrepareAsyncUpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::UpdateItemRes>>(PrepareAsyncUpdateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ToDoService::v1::StreamUpdateChangeRes>> StreamUpdateChange(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ToDoService::v1::StreamUpdateChangeRes>>(StreamUpdateChangeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ToDoService::v1::StreamUpdateChangeRes>> AsyncStreamUpdateChange(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ToDoService::v1::StreamUpdateChangeRes>>(AsyncStreamUpdateChangeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ToDoService::v1::StreamUpdateChangeRes>> PrepareAsyncStreamUpdateChange(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ToDoService::v1::StreamUpdateChangeRes>>(PrepareAsyncStreamUpdateChangeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq* request, ::ToDoService::v1::GetListRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq* request, ::ToDoService::v1::GetListRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq* request, ::ToDoService::v1::AddItemRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq* request, ::ToDoService::v1::AddItemRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq* request, ::ToDoService::v1::UpdateItemRes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq* request, ::ToDoService::v1::UpdateItemRes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamUpdateChange(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq* request, ::grpc::ClientReadReactor< ::ToDoService::v1::StreamUpdateChangeRes>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::GetListRes>* AsyncGetListRaw(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::GetListRes>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::AddItemRes>* AsyncAddItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::AddItemRes>* PrepareAsyncAddItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::UpdateItemRes>* AsyncUpdateItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ToDoService::v1::UpdateItemRes>* PrepareAsyncUpdateItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ToDoService::v1::StreamUpdateChangeRes>* StreamUpdateChangeRaw(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ToDoService::v1::StreamUpdateChangeRes>* AsyncStreamUpdateChangeRaw(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ToDoService::v1::StreamUpdateChangeRes>* PrepareAsyncStreamUpdateChangeRaw(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::ToDoService::v1::GetListRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::GetListRes>> AsyncGetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::GetListRes>>(AsyncGetListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::GetListRes>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::GetListRes>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    ::grpc::Status AddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::ToDoService::v1::AddItemRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::AddItemRes>> AsyncAddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::AddItemRes>>(AsyncAddItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::AddItemRes>> PrepareAsyncAddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::AddItemRes>>(PrepareAsyncAddItemRaw(context, request, cq));
    }
    ::grpc::Status UpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::ToDoService::v1::UpdateItemRes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::UpdateItemRes>> AsyncUpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::UpdateItemRes>>(AsyncUpdateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::UpdateItemRes>> PrepareAsyncUpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::UpdateItemRes>>(PrepareAsyncUpdateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ToDoService::v1::StreamUpdateChangeRes>> StreamUpdateChange(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ToDoService::v1::StreamUpdateChangeRes>>(StreamUpdateChangeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ToDoService::v1::StreamUpdateChangeRes>> AsyncStreamUpdateChange(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ToDoService::v1::StreamUpdateChangeRes>>(AsyncStreamUpdateChangeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ToDoService::v1::StreamUpdateChangeRes>> PrepareAsyncStreamUpdateChange(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ToDoService::v1::StreamUpdateChangeRes>>(PrepareAsyncStreamUpdateChangeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq* request, ::ToDoService::v1::GetListRes* response, std::function<void(::grpc::Status)>) override;
      void GetList(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq* request, ::ToDoService::v1::GetListRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq* request, ::ToDoService::v1::AddItemRes* response, std::function<void(::grpc::Status)>) override;
      void AddItem(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq* request, ::ToDoService::v1::AddItemRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq* request, ::ToDoService::v1::UpdateItemRes* response, std::function<void(::grpc::Status)>) override;
      void UpdateItem(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq* request, ::ToDoService::v1::UpdateItemRes* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamUpdateChange(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq* request, ::grpc::ClientReadReactor< ::ToDoService::v1::StreamUpdateChangeRes>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::GetListRes>* AsyncGetListRaw(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::GetListRes>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::ToDoService::v1::GetListReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::AddItemRes>* AsyncAddItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::AddItemRes>* PrepareAsyncAddItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::AddItemReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::UpdateItemRes>* AsyncUpdateItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ToDoService::v1::UpdateItemRes>* PrepareAsyncUpdateItemRaw(::grpc::ClientContext* context, const ::ToDoService::v1::UpdateItemReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ToDoService::v1::StreamUpdateChangeRes>* StreamUpdateChangeRaw(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request) override;
    ::grpc::ClientAsyncReader< ::ToDoService::v1::StreamUpdateChangeRes>* AsyncStreamUpdateChangeRaw(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ToDoService::v1::StreamUpdateChangeRes>* PrepareAsyncStreamUpdateChangeRaw(::grpc::ClientContext* context, const ::ToDoService::v1::StreamUpdateChangeReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetList_;
    const ::grpc::internal::RpcMethod rpcmethod_AddItem_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateItem_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamUpdateChange_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetList(::grpc::ServerContext* context, const ::ToDoService::v1::GetListReq* request, ::ToDoService::v1::GetListRes* response);
    virtual ::grpc::Status AddItem(::grpc::ServerContext* context, const ::ToDoService::v1::AddItemReq* request, ::ToDoService::v1::AddItemRes* response);
    virtual ::grpc::Status UpdateItem(::grpc::ServerContext* context, const ::ToDoService::v1::UpdateItemReq* request, ::ToDoService::v1::UpdateItemRes* response);
    virtual ::grpc::Status StreamUpdateChange(::grpc::ServerContext* context, const ::ToDoService::v1::StreamUpdateChangeReq* request, ::grpc::ServerWriter< ::ToDoService::v1::StreamUpdateChangeRes>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::GetListReq* /*request*/, ::ToDoService::v1::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::ToDoService::v1::GetListReq* request, ::grpc::ServerAsyncResponseWriter< ::ToDoService::v1::GetListRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddItem() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::AddItemReq* /*request*/, ::ToDoService::v1::AddItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddItem(::grpc::ServerContext* context, ::ToDoService::v1::AddItemReq* request, ::grpc::ServerAsyncResponseWriter< ::ToDoService::v1::AddItemRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateItem() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::UpdateItemReq* /*request*/, ::ToDoService::v1::UpdateItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateItem(::grpc::ServerContext* context, ::ToDoService::v1::UpdateItemReq* request, ::grpc::ServerAsyncResponseWriter< ::ToDoService::v1::UpdateItemRes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamUpdateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamUpdateChange() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StreamUpdateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamUpdateChange(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::StreamUpdateChangeReq* /*request*/, ::grpc::ServerWriter< ::ToDoService::v1::StreamUpdateChangeRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamUpdateChange(::grpc::ServerContext* context, ::ToDoService::v1::StreamUpdateChangeReq* request, ::grpc::ServerAsyncWriter< ::ToDoService::v1::StreamUpdateChangeRes>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetList<WithAsyncMethod_AddItem<WithAsyncMethod_UpdateItem<WithAsyncMethod_StreamUpdateChange<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ToDoService::v1::GetListReq, ::ToDoService::v1::GetListRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ToDoService::v1::GetListReq* request, ::ToDoService::v1::GetListRes* response) { return this->GetList(context, request, response); }));}
    void SetMessageAllocatorFor_GetList(
        ::grpc::MessageAllocator< ::ToDoService::v1::GetListReq, ::ToDoService::v1::GetListRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ToDoService::v1::GetListReq, ::ToDoService::v1::GetListRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::GetListReq* /*request*/, ::ToDoService::v1::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetList(
      ::grpc::CallbackServerContext* /*context*/, const ::ToDoService::v1::GetListReq* /*request*/, ::ToDoService::v1::GetListRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddItem() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ToDoService::v1::AddItemReq, ::ToDoService::v1::AddItemRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ToDoService::v1::AddItemReq* request, ::ToDoService::v1::AddItemRes* response) { return this->AddItem(context, request, response); }));}
    void SetMessageAllocatorFor_AddItem(
        ::grpc::MessageAllocator< ::ToDoService::v1::AddItemReq, ::ToDoService::v1::AddItemRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ToDoService::v1::AddItemReq, ::ToDoService::v1::AddItemRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::AddItemReq* /*request*/, ::ToDoService::v1::AddItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddItem(
      ::grpc::CallbackServerContext* /*context*/, const ::ToDoService::v1::AddItemReq* /*request*/, ::ToDoService::v1::AddItemRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateItem() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ToDoService::v1::UpdateItemReq, ::ToDoService::v1::UpdateItemRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ToDoService::v1::UpdateItemReq* request, ::ToDoService::v1::UpdateItemRes* response) { return this->UpdateItem(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateItem(
        ::grpc::MessageAllocator< ::ToDoService::v1::UpdateItemReq, ::ToDoService::v1::UpdateItemRes>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ToDoService::v1::UpdateItemReq, ::ToDoService::v1::UpdateItemRes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::UpdateItemReq* /*request*/, ::ToDoService::v1::UpdateItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateItem(
      ::grpc::CallbackServerContext* /*context*/, const ::ToDoService::v1::UpdateItemReq* /*request*/, ::ToDoService::v1::UpdateItemRes* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamUpdateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamUpdateChange() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::ToDoService::v1::StreamUpdateChangeReq, ::ToDoService::v1::StreamUpdateChangeRes>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ToDoService::v1::StreamUpdateChangeReq* request) { return this->StreamUpdateChange(context, request); }));
    }
    ~WithCallbackMethod_StreamUpdateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamUpdateChange(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::StreamUpdateChangeReq* /*request*/, ::grpc::ServerWriter< ::ToDoService::v1::StreamUpdateChangeRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ToDoService::v1::StreamUpdateChangeRes>* StreamUpdateChange(
      ::grpc::CallbackServerContext* /*context*/, const ::ToDoService::v1::StreamUpdateChangeReq* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetList<WithCallbackMethod_AddItem<WithCallbackMethod_UpdateItem<WithCallbackMethod_StreamUpdateChange<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::GetListReq* /*request*/, ::ToDoService::v1::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddItem() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::AddItemReq* /*request*/, ::ToDoService::v1::AddItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateItem() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::UpdateItemReq* /*request*/, ::ToDoService::v1::UpdateItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamUpdateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamUpdateChange() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StreamUpdateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamUpdateChange(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::StreamUpdateChangeReq* /*request*/, ::grpc::ServerWriter< ::ToDoService::v1::StreamUpdateChangeRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::GetListReq* /*request*/, ::ToDoService::v1::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddItem() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::AddItemReq* /*request*/, ::ToDoService::v1::AddItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateItem() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::UpdateItemReq* /*request*/, ::ToDoService::v1::UpdateItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamUpdateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamUpdateChange() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StreamUpdateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamUpdateChange(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::StreamUpdateChangeReq* /*request*/, ::grpc::ServerWriter< ::ToDoService::v1::StreamUpdateChangeRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamUpdateChange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::GetListReq* /*request*/, ::ToDoService::v1::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddItem() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::AddItemReq* /*request*/, ::ToDoService::v1::AddItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateItem() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateItem(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::UpdateItemReq* /*request*/, ::ToDoService::v1::UpdateItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamUpdateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamUpdateChange() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamUpdateChange(context, request); }));
    }
    ~WithRawCallbackMethod_StreamUpdateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamUpdateChange(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::StreamUpdateChangeReq* /*request*/, ::grpc::ServerWriter< ::ToDoService::v1::StreamUpdateChangeRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamUpdateChange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ToDoService::v1::GetListReq, ::ToDoService::v1::GetListRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ToDoService::v1::GetListReq, ::ToDoService::v1::GetListRes>* streamer) {
                       return this->StreamedGetList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetList(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::GetListReq* /*request*/, ::ToDoService::v1::GetListRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ToDoService::v1::GetListReq,::ToDoService::v1::GetListRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddItem() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ToDoService::v1::AddItemReq, ::ToDoService::v1::AddItemRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ToDoService::v1::AddItemReq, ::ToDoService::v1::AddItemRes>* streamer) {
                       return this->StreamedAddItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::AddItemReq* /*request*/, ::ToDoService::v1::AddItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ToDoService::v1::AddItemReq,::ToDoService::v1::AddItemRes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateItem() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ToDoService::v1::UpdateItemReq, ::ToDoService::v1::UpdateItemRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ToDoService::v1::UpdateItemReq, ::ToDoService::v1::UpdateItemRes>* streamer) {
                       return this->StreamedUpdateItem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::UpdateItemReq* /*request*/, ::ToDoService::v1::UpdateItemRes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ToDoService::v1::UpdateItemReq,::ToDoService::v1::UpdateItemRes>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetList<WithStreamedUnaryMethod_AddItem<WithStreamedUnaryMethod_UpdateItem<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamUpdateChange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamUpdateChange() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::ToDoService::v1::StreamUpdateChangeReq, ::ToDoService::v1::StreamUpdateChangeRes>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::ToDoService::v1::StreamUpdateChangeReq, ::ToDoService::v1::StreamUpdateChangeRes>* streamer) {
                       return this->StreamedStreamUpdateChange(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamUpdateChange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamUpdateChange(::grpc::ServerContext* /*context*/, const ::ToDoService::v1::StreamUpdateChangeReq* /*request*/, ::grpc::ServerWriter< ::ToDoService::v1::StreamUpdateChangeRes>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamUpdateChange(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ToDoService::v1::StreamUpdateChangeReq,::ToDoService::v1::StreamUpdateChangeRes>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamUpdateChange<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetList<WithStreamedUnaryMethod_AddItem<WithStreamedUnaryMethod_UpdateItem<WithSplitStreamingMethod_StreamUpdateChange<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace ToDoService


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_todo_2eproto__INCLUDED
